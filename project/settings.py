"""
Django settings for this project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# The SECRET_KEY is provided via an environment variable in OpenShift
SECRET_KEY = os.getenv(
    'DJANGO_SECRET_KEY',
    # safe value used for development when DJANGO_SECRET_KEY might not be set
    '9e4@&tw46$l31)zrqe3wi+-slqm(ruvz&se0^%9#6(_w3ui!c0'
)

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
DEBUG = bool(os.environ.get('DJANGO_DEBUG', False))

ALLOWED_HOSTS = ['*']

LOGGING_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': LOGGING_LEVEL,
	    'propagate': True,
        },
        'swift_browser': {
            'handlers': ['console'],
            'level': LOGGING_LEVEL,
	    'propagate': True,
        },
        'django_python3_ldap': {
            'handlers': ['console'],
            'level': LOGGING_LEVEL,
	    'propagate': True,
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'django_python3_ldap',
    'jquery',
    'bootstrap3',
    'swift_browser',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

# swiftbrowser setup
SWIFT_AUTH_URL = os.getenv('SWIFT_AUTH_URL','http://127.0.0.1:8080/auth/v1.0')
SWIFT_AUTH_VERSION = os.getenv('SWIFT_AUTH_VERSION','1')
SWIFT_SSL_INSECURE = os.getenv('SWIFT_SSL_INSECURE',False)
SWIFT_AUTH_USER = os.getenv('SWIFT_AUTH_USER','')
SWIFT_AUTH_KEY = os.getenv('SWIFT_AUTH_KEY','')

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

from . import database

DATABASES = {
    'default': database.config()
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

INTERNAL_IPS = ['127.0.0.1']

LOGIN_REDIRECT_URL = 'containers'

AUTHENTICATION_BACKENDS = [
    'django_python3_ldap.auth.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# The URL of the LDAP server.
LDAP_AUTH_URL = os.environ.get('LDAP_AUTH_URL',
        'ldap://localhost:389')

# Initiate TLS on connection.
LDAP_AUTH_USE_TLS = os.environ.get('LDAP_AUTH_USE_TLS',
	False)

# The LDAP search base for looking up users.
LDAP_AUTH_SEARCH_BASE = os.environ.get('LDAP_AUTH_SEARCH_BASE',
        'ou=people,dc=example,dc=com')

# The LDAP class that represents a user.
LDAP_AUTH_OBJECT_CLASS = os.environ.get('LDAP_AUTH_OBJECT_CLASS',
        'inetOrgPerson')

# User model fields mapped to the LDAP
# attributes that represent them.
LDAP_AUTH_USER_FIELDS = {
    "username": os.environ.get('LDAP_AUTH_USERNAME_ATTR', 'uid'),
    "first_name": os.environ.get('LDAP_AUTH_FIRSTNAME_ATTR', 'givenName'),
    "last_name": os.environ.get('LDAP_AUTH_LASTNAME_ATTR', 'sn'),
    "email": os.environ.get('LDAP_AUTH_EMAIL_ATTR', 'mail'),
}

# A tuple of django model fields used to uniquely identify a user.
LDAP_AUTH_USER_LOOKUP_FIELDS = os.environ.get('LDAP_AUTH_USER_LOOKUP_FIELDS',
        ("username",))

# Path to a callable that takes a dict of {model_field_name: value},
# returning a dict of clean model data.
# Use this to customize how data loaded from LDAP is saved to the User model.
LDAP_AUTH_CLEAN_USER_DATA = os.environ.get('LDAP_AUTH_CLEAN_USER_DATA',
        "django_python3_ldap.utils.clean_user_data")

# Path to a callable that takes a user model and a dict of {ldap_field_name: [value]},
# and saves any additional user relationships based on the LDAP data.
# Use this to customize how data loaded from LDAP is saved to User model relations.
# For customizing non-related User model fields, use LDAP_AUTH_CLEAN_USER_DATA.
LDAP_AUTH_SYNC_USER_RELATIONS = os.environ.get('LDAP_AUTH_SYNC_USER_RELATIONS',
        "django_python3_ldap.utils.sync_user_relations")

# Path to a callable that takes a dict of {ldap_field_name: value},
# returning a list of [ldap_search_filter]. The search filters will then be AND'd
# together when creating the final search filter.
LDAP_AUTH_FORMAT_SEARCH_FILTERS = os.environ.get('LDAP_AUTH_FORMAT_SEARCH_FILTERS',
        "django_python3_ldap.utils.format_search_filters")

# Path to a callable that takes a dict of {model_field_name: value}, and returns
# a string of the username to bind to the LDAP server.
# Use this to support different types of LDAP server.
LDAP_AUTH_FORMAT_USERNAME = os.environ.get('LDAP_AUTH_FORMAT_USERNAME',
        'django_python3_ldap.utils.format_username_openldap')

# Sets the login domain for Active Directory users.
LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = os.environ.get('LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN',
        None)

# The LDAP username and password of a user for querying the LDAP database for user
# details. If None, then the authenticated user will be used for querying, and
# the `ldap_sync_users` command will perform an anonymous query.
LDAP_AUTH_CONNECTION_USERNAME = os.environ.get('LDAP_AUTH_CONNECTION_USERNAME',
        None)
LDAP_AUTH_CONNECTION_PASSWORD = os.environ.get('LDAP_AUTH_CONNECTION_PASSWORD',
        None)

# Set connection/receive timeouts (in seconds) on the underlying `ldap3` library.
LDAP_AUTH_CONNECT_TIMEOUT = os.environ.get('LDAP_AUTH_CONNECT_TIMEOUT',
        None)
LDAP_AUTH_RECEIVE_TIMEOUT = os.environ.get('LDAP_AUTH_RECEIVE_TIMEOUT',
        None)

# Users must be a member of this group to access
LDAP_GROUP_MEMBER = os.environ.get('LDAP_GROUP_MEMBER',
        None)

